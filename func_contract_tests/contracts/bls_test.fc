#include "imports/stdlib.fc";

const op::verify = "op::verify"c;
const int P1_SIZE = 48 * 8;
const int P2_SIZE = 96 * 8;



const slice IC0 = "b640185d5381069b429c7aa129a69c92f96e866b63855fdcb9ba767011287c68c4fc96fccda0afcdcdce59fed5fc2faf"s;
const slice IC1 = "8a79eec956ea6253431dc2f36916cb1c53660788bb42df48a85693e65a6d8a2e8cd5761445ba62a6e58a8d35bb18341a"s;
const slice IC2 = "9096fdf44998d338be4426bd4b673acc46471c983722f62593bf07943f26233becf2bb29b2c3d11c40ce7f86cf5701e7"s;
const slice IC3 = "881fb916564fa730e7aad4882ca97476b53f8c343b22706a62ad644579eb99b6d571640e509ed53e938aa81c767a3a94"s;
const slice IC4 = "b5398fb4fe69e0aad068eb52f878af6003e980cc38883ebbd586f08012df2ec36d5f8fddb00d8b0799098205e90589c2"s;

const slice vk_gamma_2 = "93e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8"s;
const slice vk_delta_2 = "93e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8"s;
const slice vk_alpha_1 = "972ade68b419065fdd432759861f8892d3232b4af18993fae34c6af680c43c4fb0301f4a7f72f556c2b0e2fb76588d70"s;
const slice vk_beta_2 = "92c40d364bca7b1e7119a4f61a643f4f9bcadce0bd5c5bc101270f9b1fa9b56967563e98d539066e6bf47f96ec08b7e911858a7c34c9f102ae37c11d88825ff712bff3b96d40ff14f717cf1ac6a1200a1c0c05251c033fee5e5c5724367fe3c6"s;

int bls_verify(slice pk, slice msg, slice sgn) asm "BLS_VERIFY";
slice bls_g1_mul(slice x, int s) asm "BLS_G1_MUL";
slice bls_g1_add(slice x, slice y) asm "BLS_G1_ADD";
slice bls_g1_neg(slice x) asm "BLS_G1_NEG";
slice bls_g1_multiexp(
    
    slice x1, int y1,
    
    slice x2, int y2,
    
    slice x3, int y3,
    
    slice x4, int y4,
    
    int n
) asm "BLS_G1_MULTIEXP";
int bls_pairing(slice x1, slice y1, slice x2, slice y2, slice x3, slice y3, slice x4, slice y4, int n) asm "BLS_PAIRING";

global int ctx_res;

;; load_data populates storage variables using stored data
() load_data() impure {

    var ds = get_data().begin_parse();

    ctx_res = ds~load_uint(32);

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_res, 32)
            .end_cell()
    );
}


(slice, slice) load_p1(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p1 = first_bits(s, P1_SIZE);
    s~skip_bits(P1_SIZE);
    return (s, p1);
}

(slice, slice) load_p2(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p2 = first_bits(s, P2_SIZE);
    s~skip_bits(P2_SIZE);
    return (s, p2);
}

(slice, int) load_newint(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    int x = s~load_uint(256);
    return (s, x);
}

() groth16Verify(slice in_msg_body) impure {

    slice pi_a = in_msg_body~load_p1();
    slice pi_b = in_msg_body~load_p2();
    slice pi_c = in_msg_body~load_p1();


    
    int pubInput0 = in_msg_body~load_newint();
    
    int pubInput1 = in_msg_body~load_newint();
    
    int pubInput2 = in_msg_body~load_newint();
    
    int pubInput3 = in_msg_body~load_newint();
    

    slice cpub = bls_g1_multiexp(
        
        IC1, pubInput0,
        
        IC2, pubInput1,
        
        IC3, pubInput2,
        
        IC4, pubInput3,
        
        4
    );


    cpub = bls_g1_add(cpub, IC0);
    slice pi_a_neg = bls_g1_neg(pi_a);
    int a = bls_pairing(
        cpub, vk_gamma_2,
        pi_a_neg, pi_b,
        pi_c, vk_delta_2,
        vk_alpha_1, vk_beta_2,
        4);
    ;; ctx_res = a;
    if (a == 0) {
        ctx_res = 0;
    } else {
        ctx_res = 1;
    }
    save_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    
    if (op == op::verify) {
        groth16Verify(in_msg_body);
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}


int get_res() method_id {
    load_data();
    return ctx_res;
}
